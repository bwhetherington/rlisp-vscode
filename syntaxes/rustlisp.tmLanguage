<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
	<key>fileTypes</key>
	<array>
		<string>rl</string>
	</array>
	<key>name</key>
	<string>RustLisp</string>
	<key>foldingStartMarker</key>
	<string>\(\s*$</string>
	<key>foldingStopMarker</key>
	<string>^\s*\)</string>
	<key>patterns</key>
	<array>
		<dict>
			<key>include</key>
			<string>#multilinecomment</string>
		</dict>
		<dict>
			<key>begin</key>
			<string>(\#px|\#rx)?(\#)?\"</string>
			<key>comment</key>
			<string>strings, byte strings, regular expressions</string>
			<key>end</key>
			<string>\"</string>
			<key>name</key>
			<string>string.quoted.double.rustlisp</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>match</key>
					<string>([^"\\]|\\.|\\\\)*</string>
					<key>name</key>
					<string>constant</string>
				</dict>
			</array>
		</dict>
		<dict>
			<key>comment</key>
			<string>booleans</string>
			<key>match</key>
			<string>((\#[tT])|(\#[fF])|(\#true)|(\#false))(?=[()\[\]{}",'`;\ \s])</string>
			<key>name</key>
			<string>constant.language.boolean.rustlisp</string>
		</dict>
		<dict>
			<key>comment</key>
			<string>character datum</string>
			<key>match</key>
			<string>((((?i)((\#\\null)|(\#\\nul)|(\#\\backspace)|(\#\\tab)|(\#\\newline)|(\#\\linefeed)|(\#\\vtab)|(\#\\page)|(\#\\return)|(\#\\space)|(\#\\rubout))(?-i)))|(\#\\(([0-7]){1,3}))|(\#\\u(([0-9abcdefABCDEF]){1,4}))|(\#\\U(([0-9abcdefABCDEF]){1,8}))|(\#\\.(?=[^[:alpha:]])))</string>
			<key>name</key>
			<string>constant</string>
		</dict>
		<dict>
			<key>name</key>
			<string>general binary number</string>
			<key>match</key>
			<string>((\#[bBeEiI])*(\#[ei])?(((((((\+)|(\-)))?((([0-1])+)|(([0-1])+\/([0-1])+)))|(((((\+)|(\-)))?((([0-1])+)|(([0-1])+\/([0-1])+)))?((\+)|(\-))(((([0-1])+)|(([0-1])+\/([0-1])+)))?i)))|((((((((\+)|(\-)))?((([0-1])+(\#)*(\.)?(\#)*)|((([0-1])+)?\.([0-1])+(\#)*)|(([0-1])+(\#)*\/([0-1])+(\#)*))(([sldef](((\+)|(\-)))?([0-1])+))?)|(((\+)|(\-))(((inf\.0)|(nan\.0)|(inf\.f)|(nan\.f))))))|(((((((((\+)|(\-)))?((([0-1])+(\#)*(\.)?(\#)*)|((([0-1])+)?\.([0-1])+(\#)*)|(([0-1])+(\#)*\/([0-1])+(\#)*))(([sldef](((\+)|(\-)))?([0-1])+))?)|(((\+)|(\-))(((inf\.0)|(nan\.0)|(inf\.f)|(nan\.f))))))?((\+)|(\-))(((((([0-1])+(\#)*(\.)?(\#)*)|((([0-1])+)?\.([0-1])+(\#)*)|(([0-1])+(\#)*\/([0-1])+(\#)*))(([sldef](((\+)|(\-)))?([0-1])+))?)|((((inf\.0)|(nan\.0)|(inf\.f)|(nan\.f))))))?i)|((((((\+)|(\-)))?((([0-1])+(\#)*(\.)?(\#)*)|((([0-1])+)?\.([0-1])+(\#)*)|(([0-1])+(\#)*\/([0-1])+(\#)*))(([sldef](((\+)|(\-)))?([0-1])+))?)|(((\+)|(\-))(((inf\.0)|(nan\.0)|(inf\.f)|(nan\.f)))))@(((((\+)|(\-)))?((([0-1])+(\#)*(\.)?(\#)*)|((([0-1])+)?\.([0-1])+(\#)*)|(([0-1])+(\#)*\/([0-1])+(\#)*))(([sldef](((\+)|(\-)))?([0-1])+))?)|(((\+)|(\-))(((inf\.0)|(nan\.0)|(inf\.f)|(nan\.f))))))))))))(?=[()\[\]{}",'`;\ \s])</string>
			<key>name</key>
			<string>constant.numeric</string>
		</dict>
		<dict>
			<key>comment</key>
			<string>general octal number</string>
			<key>match</key>
			<string>((\#[oOeEiI])*(\#[ei])?(((((((\+)|(\-)))?((([0-7])+)|(([0-7])+\/([0-7])+)))|(((((\+)|(\-)))?((([0-7])+)|(([0-7])+\/([0-7])+)))?((\+)|(\-))(((([0-7])+)|(([0-7])+\/([0-7])+)))?i)))|((((((((\+)|(\-)))?((([0-7])+(\#)*(\.)?(\#)*)|((([0-7])+)?\.([0-7])+(\#)*)|(([0-7])+(\#)*\/([0-7])+(\#)*))(([sldef](((\+)|(\-)))?([0-7])+))?)|(((\+)|(\-))(((inf\.0)|(nan\.0)|(inf\.f)|(nan\.f))))))|(((((((((\+)|(\-)))?((([0-7])+(\#)*(\.)?(\#)*)|((([0-7])+)?\.([0-7])+(\#)*)|(([0-7])+(\#)*\/([0-7])+(\#)*))(([sldef](((\+)|(\-)))?([0-7])+))?)|(((\+)|(\-))(((inf\.0)|(nan\.0)|(inf\.f)|(nan\.f))))))?((\+)|(\-))(((((([0-7])+(\#)*(\.)?(\#)*)|((([0-7])+)?\.([0-7])+(\#)*)|(([0-7])+(\#)*\/([0-7])+(\#)*))(([sldef](((\+)|(\-)))?([0-7])+))?)|((((inf\.0)|(nan\.0)|(inf\.f)|(nan\.f))))))?i)|((((((\+)|(\-)))?((([0-7])+(\#)*(\.)?(\#)*)|((([0-7])+)?\.([0-7])+(\#)*)|(([0-7])+(\#)*\/([0-7])+(\#)*))(([sldef](((\+)|(\-)))?([0-7])+))?)|(((\+)|(\-))(((inf\.0)|(nan\.0)|(inf\.f)|(nan\.f)))))@(((((\+)|(\-)))?((([0-7])+(\#)*(\.)?(\#)*)|((([0-7])+)?\.([0-7])+(\#)*)|(([0-7])+(\#)*\/([0-7])+(\#)*))(([sldef](((\+)|(\-)))?([0-7])+))?)|(((\+)|(\-))(((inf\.0)|(nan\.0)|(inf\.f)|(nan\.f))))))))))))(?=[()\[\]{}",'`;\ \s])</string>
			<key>name</key>
			<string>constant.numeric</string>
		</dict>
		<dict>
			<key>comment</key>
			<string>general decimal number</string>
			<key>match</key>
			<string>((\#[dDeEiI])*(\#[ei])?(((((((\+)|(\-)))?((([0-9])+)|(([0-9])+\/([0-9])+)))|(((((\+)|(\-)))?((([0-9])+)|(([0-9])+\/([0-9])+)))?((\+)|(\-))(((([0-9])+)|(([0-9])+\/([0-9])+)))?i)))|((((((((\+)|(\-)))?((([0-9])+(\#)*(\.)?(\#)*)|((([0-9])+)?\.([0-9])+(\#)*)|(([0-9])+(\#)*\/([0-9])+(\#)*))(([sldef](((\+)|(\-)))?([0-9])+))?)|(((\+)|(\-))(((inf\.0)|(nan\.0)|(inf\.f)|(nan\.f))))))|(((((((((\+)|(\-)))?((([0-9])+(\#)*(\.)?(\#)*)|((([0-9])+)?\.([0-9])+(\#)*)|(([0-9])+(\#)*\/([0-9])+(\#)*))(([sldef](((\+)|(\-)))?([0-9])+))?)|(((\+)|(\-))(((inf\.0)|(nan\.0)|(inf\.f)|(nan\.f))))))?((\+)|(\-))(((((([0-9])+(\#)*(\.)?(\#)*)|((([0-9])+)?\.([0-9])+(\#)*)|(([0-9])+(\#)*\/([0-9])+(\#)*))(([sldef](((\+)|(\-)))?([0-9])+))?)|((((inf\.0)|(nan\.0)|(inf\.f)|(nan\.f))))))?i)|((((((\+)|(\-)))?((([0-9])+(\#)*(\.)?(\#)*)|((([0-9])+)?\.([0-9])+(\#)*)|(([0-9])+(\#)*\/([0-9])+(\#)*))(([sldef](((\+)|(\-)))?([0-9])+))?)|(((\+)|(\-))(((inf\.0)|(nan\.0)|(inf\.f)|(nan\.f)))))@(((((\+)|(\-)))?((([0-9])+(\#)*(\.)?(\#)*)|((([0-9])+)?\.([0-9])+(\#)*)|(([0-9])+(\#)*\/([0-9])+(\#)*))(([sldef](((\+)|(\-)))?([0-9])+))?)|(((\+)|(\-))(((inf\.0)|(nan\.0)|(inf\.f)|(nan\.f))))))))))))(?=[()\[\]{}",'`;\ \s])</string>
			<key>name</key>
			<string>constant.numeric.decimal.rustlisp</string>
		</dict>
		<dict>
			<key>comment</key>
			<string>general hexadecimal number</string>
			<key>match</key>
			<string>(\#([xXeEiI])*(\#[ei])?(((((((\+)|(\-)))?((([0-9abcdefABCDEF])+)|(([0-9abcdefABCDEF])+\/([0-9abcdefABCDEF])+)))|(((((\+)|(\-)))?((([0-9abcdefABCDEF])+)|(([0-9abcdefABCDEF])+\/([0-9abcdefABCDEF])+)))?((\+)|(\-))(((([0-9abcdefABCDEF])+)|(([0-9abcdefABCDEF])+\/([0-9abcdefABCDEF])+)))?i)))|((((((((\+)|(\-)))?((([0-9abcdefABCDEF])+(\#)*(\.)?(\#)*)|((([0-9abcdefABCDEF])+)?\.([0-9abcdefABCDEF])+(\#)*)|(([0-9abcdefABCDEF])+(\#)*\/([0-9abcdefABCDEF])+(\#)*))(([sl](((\+)|(\-)))?([0-9abcdefABCDEF])+))?)|(((\+)|(\-))(((inf\.)|(nan\.))[0ftT]))))|(((((((((\+)|(\-)))?((([0-9abcdefABCDEF])+(\#)*(\.)?(\#)*)|((([0-9abcdefABCDEF])+)?\.([0-9abcdefABCDEF])+(\#)*)|(([0-9abcdefABCDEF])+(\#)*\/([0-9abcdefABCDEF])+(\#)*))(([sl](((\+)|(\-)))?([0-9abcdefABCDEF])+))?)|(((\+)|(\-))(((inf\.)|(nan\.))[0ftT]))))?((\+)|(\-))(((((([0-9abcdefABCDEF])+(\#)*(\.)?(\#)*)|((([0-9abcdefABCDEF])+)?\.([0-9abcdefABCDEF])+(\#)*)|(([0-9abcdefABCDEF])+(\#)*\/([0-9abcdefABCDEF])+(\#)*))(([sl](((\+)|(\-)))?([0-9abcdefABCDEF])+))?)|((((inf\.)|(nan\.))[0ftT]))))?i)|((((((\+)|(\-)))?((([0-9abcdefABCDEF])+(\#)*(\.)?(\#)*)|((([0-9abcdefABCDEF])+)?\.([0-9abcdefABCDEF])+(\#)*)|(([0-9abcdefABCDEF])+(\#)*\/([0-9abcdefABCDEF])+(\#)*))(([sl](((\+)|(\-)))?([0-9abcdefABCDEF])+))?)|(((\+)|(\-))(((inf\.)|(nan\.))[0ftT])))@(((((\+)|(\-)))?((([0-9abcdefABCDEF])+(\#)*(\.)?(\#)*)|((([0-9abcdefABCDEF])+)?\.([0-9abcdefABCDEF])+(\#)*)|(([0-9abcdefABCDEF])+(\#)*\/([0-9abcdefABCDEF])+(\#)*))(([sl](((\+)|(\-)))?([0-9abcdefABCDEF])+))?)|(((\+)|(\-))(((inf\.)|(nan\.))[0ftT]))))))))))(?=[()\[\]{}",'`;\ \s])</string>
			<key>name</key>
			<string>constant.numeric.hexadecimal.rustlisp</string>
		</dict>

		
		<dict>
			<key>comment</key>
			<string>general quaternion</string>
			<key>match</key>
			<string>(([0-9]*(\.[0-9]*)?)([+-]?[0-9]*(\.[0-9]*)?)i([+-]?[0-9]*(\.[0-9]*)?)j([+-]?[0-9]*(\.[0-9]*)?)k)</string>
			<key>name</key>
			<string>constant.numeric.quaternion.rustlisp</string>
		</dict>

		<dict>
			<key>comment</key>
			<string>ab quaternion</string>
			<key>match</key>
			<string>(([+-]?[0-9]+(\.[0-9]*)?)([+-]?[0-9]+(\.[0-9]*)?)i)</string>
			<key>name</key>
			<string>constant.numeric.quaternion.rustlisp</string>
		</dict>

		<dict>
			<key>comment</key>
			<string>ac quaternion</string>
			<key>match</key>
			<string>(([+-]?[0-9]+(\.[0-9]*)?)([+-]?[0-9]+(\.[0-9]*)?)j)</string>
			<key>name</key>
			<string>constant.numeric.quaternion.rustlisp</string>
		</dict>

		<dict>
			<key>comment</key>
			<string>ad quaternion</string>
			<key>match</key>
			<string>(([+-]?[0-9]+(\.[0-9]*)?)([+-]?[0-9]+(\.[0-9]*)?)k)</string>
			<key>name</key>
			<string>constant.numeric.quaternion.rustlisp</string>
		</dict>

		<dict>
			<key>comment</key>
			<string>bc quaternion</string>
			<key>match</key>
			<string>(([+-]?[0-9]+(\.[0-9]*)?)i([+-]?[0-9]+(\.[0-9]*)?)j)</string>
			<key>name</key>
			<string>constant.numeric.quaternion.rustlisp</string>
		</dict>

		<dict>
			<key>comment</key>
			<string>bd quaternion</string>
			<key>match</key>
			<string>(([+-]?[0-9]+(\.[0-9]*)?)i([+-]?[0-9]+(\.[0-9]*)?)k)</string>
			<key>name</key>
			<string>constant.numeric.quaternion.rustlisp</string>
		</dict>

		<dict>
			<key>comment</key>
			<string>cd quaternion</string>
			<key>match</key>
			<string>(([+-]?[0-9]+(\.[0-9]*)?)j([+-]?[0-9]+(\.[0-9]*)?)k)</string>
			<key>name</key>
			<string>constant.numeric.quaternion.rustlisp</string>
		</dict>

		<dict>
			<key>comment</key>
			<string>abc quaternion</string>
			<key>match</key>
			<string>(([+-]?[0-9]+(\.[0-9]*)?)([+-]?[0-9]+(\.[0-9]*)?)i([+-]?[0-9]*(\.[0-9]*)?)j)</string>
			<key>name</key>
			<string>constant.numeric.quaternion.rustlisp</string>
		</dict>

		<dict>
			<key>comment</key>
			<string>abd quaternion</string>
			<key>match</key>
			<string>(([+-]?[0-9]+(\.[0-9]*)?)([+-]?[0-9]+(\.[0-9]*)?)i([+-]?[0-9]*(\.[0-9]*)?)k)</string>
			<key>name</key>
			<string>constant.numeric.quaternion.rustlisp</string>
		</dict>

		<dict>
			<key>comment</key>
			<string>acd quaternion</string>
			<key>match</key>
			<string>(([+-]?[0-9]+(\.[0-9]*)?)([+-]?[0-9]+(\.[0-9]*)?)j([+-]?[0-9]+(\.[0-9]*)?)k)</string>
			<key>name</key>
			<string>constant.numeric.quaternion.rustlisp</string>
		</dict>

		<dict>
			<key>comment</key>
			<string>bcd quaternion</string>
			<key>match</key>
			<string>(([+-]?[0-9]+(\.[0-9]*)?)i([+-]?[0-9]+(\.[0-9]*)?)j([+-]?[0-9]+(\.[0-9]*)?)k)</string>
			<key>name</key>
			<string>constant.numeric.quaternion.rustlisp</string>
		</dict>

		<dict>
			<key>comment</key>
			<string>b quaternion</string>
			<key>match</key>
			<string>(([+-]?[0-9]+(\.[0-9]*)?)i)</string>
			<key>name</key>
			<string>constant.numeric.quaternion.rustlisp</string>
		</dict>

		<dict>
			<key>comment</key>
			<string>c quaternion</string>
			<key>match</key>
			<string>(([+-]?[0-9]+(\.[0-9]*)?)j)</string>
			<key>name</key>
			<string>constant.numeric.quaternion.rustlisp</string>
		</dict>

		<dict>
			<key>comment</key>
			<string>d quaternion</string>
			<key>match</key>
			<string>(([+-]?[0-9]+(\.[0-9]*)?)k)</string>
			<key>name</key>
			<string>constant.numeric.quaternion.rustlisp</string>
		</dict>

		<dict>
			<key>comment</key>
			<string>extflonum</string>
			<key>match</key>
			<string>(((\#[bB](((((\+)|(\-)))?((([0-1])+(\#)*(\.)?(\#)*)|((([0-1])+)?\.([0-1])+(\#)*)|(([0-1])+(\#)*\/([0-1])+(\#)*))(([tT](((\+)|(\-)))?([0-1])+))?)|(((\+)|(\-))(((inf\.)|(nan\.))[0ftT]))))|(\#[oO](((((\+)|(\-)))?((([0-7])+(\#)*(\.)?(\#)*)|((([0-7])+)?\.([0-7])+(\#)*)|(([0-7])+(\#)*\/([0-7])+(\#)*))(([tT](((\+)|(\-)))?([0-7])+))?)|(((\+)|(\-))(((inf\.)|(nan\.))[0ftT]))))|(\#[xX](((((\+)|(\-)))?((([0-9abcdefABCDEF])+(\#)*(\.)?(\#)*)|((([0-9abcdefABCDEF])+)?\.([0-9abcdefABCDEF])+(\#)*)|(([0-9abcdefABCDEF])+(\#)*\/([0-9abcdefABCDEF])+(\#)*))(([tT](((\+)|(\-)))?([0-9abcdefABCDEF])+))?)|(((\+)|(\-))(((inf\.)|(nan\.))[0ftT]))))|((\#[bB])?(((((\+)|(\-)))?((([0-9])+(\#)*(\.)?(\#)*)|((([0-9])+)?\.([0-9])+(\#)*)|(([0-9])+(\#)*\/([0-9])+(\#)*))(([tT](((\+)|(\-)))?([0-9])+))?)|(((\+)|(\-))(((inf\.)|(nan\.))[0ftT]))))))(?=[()\[\]{}",'`;\ \s])</string>
			<key>name</key>
			<string>constant</string>
		</dict>
		<dict>
			<key>comment</key>
			<string>void</string>
			<key>match</key>
			<string>\#void(?=[()\[\]{}",'`;\ \s])</string>
			<key>name</key>
			<string>constant</string>
		</dict>
		<dict>
			<key>comment</key>
			<string>symbol</string>
			<key>match</key>
			<string>\'([^#()\[\]{}",'`; \s]([^()\[\]{}",'`;\ \s])*)</string>
			<key>name</key>
			<string>constant.character.rustlisp</string>
		</dict>
		<dict>
			<key>comment</key>
			<string>quoted empty list</string>
			<key>match</key>
			<string>\'\(\)</string>
			<key>name</key>
			<string>constant</string>
		</dict>
		<dict>
			<key>comment</key>
			<string>keyword</string>
			<key>match</key>
			<string>\#\:([^#()\[\]{}",'`; \s]([^()\[\]{}",'`;\ \s])*)</string>
			<key>name</key>
			<string>constant</string>
		</dict>
		<dict>
			<key>comment</key>
			<string>syntax-quoted identifiers</string>
			<key>match</key>
			<string>\#\'([^#()\[\]{}",'`; \s]([^()\[\]{}",'`;\ \s])*)</string>
			<key>name</key>
			<string>constant</string>
		</dict>
		<dict>
			<key>comment</key>
			<string>syntax in the racket language</string>
			<key>match</key>
			<string>\b(quote|quasiquote|unquote|λ|define\-macro|define\-struct|define|let|set\!|import|true|false|nil|empty|lambda)\b((?!\S)|(?=(\)|\]|\})))</string>
			<key>name</key>
			<string>keyword.rustlisp</string>
		</dict>
		<dict>
			<key>comment</key>
			<string>control in the racket language</string>
			<key>match</key>
			<string>\b(try|if|else|cond|begin|match|when|unless)\b((?!\S)|(?=(\)|\]|\})))</string>
			<key>name</key>
			<string>keyword.control.rustlisp</string>
		</dict>
		<dict>
			<key>comment</comment>
			<string>function calls in the racket language</string>
			<key>match</key>
			<string>(?<=\()(\s)*[^\[\]\(\)\{\}\s]+</string>
			<key>name</key>
			<string>entity.name.function.rustlisp</string>
		</dict>
		<dict>
			<key>comment</comment>
			<string>struct definitions in the rustlisp language</string>
			<key>match</key>
			<string>(?<=define-struct)\s*[^\[\]\(\)\{\}\s]+</string>
			<key>name</key>
			<string>entity.name.type.rustlisp</string>
		</dict>
		<dict>
			<key>comment</key>
			<string>identifiers</string>
			<key>match</key>
			<string>([^#()\[\]{}",'`; \s]([^()\[\]{}",'`;\ \s])*)</string>
			<key>name</key>
			<string>none</string>
		</dict>
		<dict>
			<key>comment</key>
			<string>; comments begins with ; and extends to the end of the line</string>
			<key>match</key>
			<string>;.*$</string>
			<key>name</key>
			<string>comment</string>
		</dict>
		<dict>
			<key>comment</key>
			<false/>
			<key>match</key>
			<string>\#;</string>
			<key>name</key>
			<string>comment</string>
		</dict>
	</array>
	<key>repository</key>
	<dict>
		<key>multilinecomment</key>
		<dict>
			<key>begin</key>
			<string>\#\|</string>
			<key>contentName</key>
			<string>comment</string>
			<key>end</key>
			<string>\|\#</string>
			<key>name</key>
			<string>comment</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#multilinecomment</string>
					<key>name</key>
					<string>comment</string>
				</dict>
			</array>
		</dict>
	</dict>
	<key>scopeName</key>
	<string>source.rustlisp</string>
	<key>uuid</key>
	<string>c5160d97-e918-473b-a594-3d22afffc0a7</string>
</dict>
</plist>
